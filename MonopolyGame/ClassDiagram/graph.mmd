classDiagram

BaseBlock <|.. StartBlock : Implementation
BaseBlock <|.. ChanceBlock : Implementation
BaseBlock <|.. PrisonBlock : Implementation
BaseBlock <|.. FestivalBlock : Implementation
BaseBlock <|.. TravelingBlock : Implementation
BaseBlock <|.. TaxBlock : Implementation
BaseBlock <|-- BuildableBlock : Implementation
BaseBlock .. BlockLine : Association
BaseBlock .. BlockType : Association

BuildableBlock .. BlockColor : Association
BuildableBlock .. PropertyType : Association
BuildableBlock .. BuildingEffect : Association

BuildableBlock <|.. CityBlock : Implementation
BuildableBlock <|.. TouristBlock : Implementation

namespace Block {
    class BaseBlock{
        <<abstract>>
        + ~readonly~ Id : int
        + ~readonly~ Position : int
        + ~readonly~ Line : BlockLine
        + ~readonly~ Type : BlockType
        + ~readonly~ NextTurnAction : bool

        + BlockAction(GameController game)*
    }

    class BuildableBlock{
        <<abstract>>
        + ~readonly~ BlockColor : BlockColor
        + ~readonly~ BasePrice : int
        + OwnerId : int
        + PropertyStatus : PropertyType 
        + BuildingEffect : BuildingEffect
        + EffectCount : int

        + GetPropertyRent()* : int
    }


    class CityBlock{
        - _isColorCompletion : bool
        
        + CityBlock(int pos, BlockColor color, int price)
        + BlockAction(GameController game) : void
        + GetPropertyRent() : int
    }   
    
    class TouristBlock{
        - _countSameColor : int

        + TouristBlock(int pos, BlockColor color, int price)
        + BlockAction(GameController game) : void
        + GetPropertyRent() : int
    }

    class StartBlock{
        - ~readonly~ _salary : int

        + StartBlock(int salary)
        + GetSalary() : int
        + BlockAction(GameController game) : void
    }

    class ChanceBlock{
        - _listOfCard : List<BaseChanceCard>

        + ChanceBlock(int pos)
        + BlockAction(GameController game) : void
        - GetRandomCard() : BaseChanceCard
    } 

    class PrisonBlock{
        + PrisonBlock(int pos)
        %% choice method : get double dice or pay fee
        + BlockAction(GameController game) : void
    }

    class FestivalBlock{
        + BlockAction(GameController game) : void
    }

    class TravelingBlock{
        + BlockAction(GameController game) : void
    }

    class TaxBlock{
        + BlockAction(GameController game) : void
    }
     
}

BaseChanceCard <|.. StormCard : Implementation
BaseChanceCard <|.. BlackoutCard : Implementation
BaseChanceCard <|.. TornadoCard : Implementation
BaseChanceCard <|.. StealCard : Implementation
BaseChanceCard <|.. FreeChargeCard : Implementation
BaseChanceCard <|.. FreeTaxCard : Implementation
BaseChanceCard <|.. EscapeCard : Implementation
BaseChanceCard <|.. GoTaxCard : Implementation
BaseChanceCard <|.. GoStartCard : Implementation
BaseChanceCard <|.. GoTravelingCard : Implementation
BaseChanceCard <|.. RipOffCard : Implementation

IDeffenseCard <|.. FreeChargeCard : Implementation
IDeffenseCard <|.. FreeTaxCard : Implementation
IDeffenseCard <|.. EscapeCard : Implementation
ChanceCardType .. BaseChanceCard : Association
namespace ChanceCard{
    class BaseChanceCard{
        <<abstract>>
        + ~readonly~ Type : ChanceCardType

        + ChanceAction(GameController game)*
    }
    class IDeffenseCard{
        <<interface>>

        + UseCard(Player player) : void
    }

    %% Attack Card
    class StormCard{
        + StormCard() 
        + ChanceAction(GameController game) : void
    }
    class BlackoutCard{
        + BlackoutCard()
        + ChanceAction(GameController game) : void
    }
    class TornadoCard{
        + TornadoCard()
        + ChanceAction(GameController game) : void
    }
    class StealCard{
        + StealCard()
        + ChanceAction(GameController game) : void
    }
    
    %% Deffense Card
    class FreeChargeCard{
        + FreeChargeCard()
        + ChanceAction(GameController game) : void
    }
    class FreeTaxCard{
        + FreeTaxCard()
        + ChanceAction(GameController game) : void
    }
    class EscapeCard{
        + EscapeCard()
        + ChanceAction(GameController game) : void
    }

    %% Command Card
    class GoTaxCard{
        + GoTaxCard()
        + ChanceAction(GameController game) : void
    }
    class GoStartCard{
        + GoStartCard()
        + ChanceAction(GameController game) : void
    }
    class GoTravelingCard{
        + GoTravelingCard()
        + ChanceAction(GameController game, BuildableBlock building) : void
    }
    class RipOffCard{
        + RipOffCard()
        + ChanceAction(GameController game) : void
    }
}

IPlayer <|.. Player : Implementation
namespace PlayerNamespace{
    class IPlayer{
    <<interface>>
        + GetName() : string
        + GetId() : int
    }
    class Player {
        _id : int
        _name : string
    }
}

GameController "1" *-- "1..4" Player : Compotition
GameController "1" *-- "1..4" PlayerData : Compotition
GameController "1" *-- "32" BaseBlock : Compotition
GameController .. WinningCondition : Association

PlayerData "1" *-- "1" BaseBlock : Compotition
PlayerData "1" *-- "23" BuildableBlock : Compotition
PlayerData "1" *-- "1" IDeffenseCard : Compotition
PlayerData .. PlayerStatus : Association
namespace Game{
    class GameController{
        - ~readonly~ _board : BaseBlock[32]
        - _players : Dictionary~IPlayer.PlayerData~
        - _currentPlayer : IPlayer
        - _dices : int[2]
        - _diceDoubleCount : int
        - _winner : IPlayer
        - _winnerStatus : WinningCondition
        + onFinishTurn : Action

        + GameController(List~IPlayer~ players)
        + StartGame() : void
        + RollDice() : int
        - IsRollDiceDouble() : bool
        - GoToPrison() : void
        + PlayerMove(int dice) : void
        + PlayerAction(BaseBlock block) : void
        + NextTurn() : Player
        + GetBoard() : BaseBlock[32]
        + GetCurrentPlayer() IPlayer
        + GetPlayers() : IEnumerable~Player~
        + GetPlayerData(int id) PlayerData
        + GetPlayerPosition(int id) : BaseBlock
        + GetPlayerBuildings(int id) : IEnumerable~BuildableBlock~
        + GetWinner() : Player
        + GetWinnerStatus() : WinningCondition
        %% Action for BuildableBlock
        + BuyBuilding(IPlayer player, BuildableBlock block, PropertyType type=PropertyType.Land) : void
        + Sell(IPlayer player, BuildableBlock block) : void
        + PayRent(IPlayer player, BuildableBlock block) : void
        + SetEffect(BuildableBlock block, BuildingEffect effect) : void
        %% Action for CityBlock and StartBlock
        + UpgradeProperty(IPlayer player, BuildableBlock block, PropertyType p) : void
        + AquireCity(IPlayer player, BuildableBlock block) : void
        %% Action for ChanceBlock
        + AttactCity(IPlayer player, BuildableBlock block) : void
        + UseCard(IPlayer player, IDeffenseCard card) : void
        %% Action for PrisonBlock
        + MakeChoice(int choice) : int
        %% Action for FestivalBlock
        %% SetEffect(BuildableBlock block, BuildingEffect effect) : void
        %% Action for TravelBlock
        %% PlayerMove()

        - CheckColorCompletion() : void
        - CheckLineCompletion() : void
        - CheckTourismCompletion() : void
        - CheckPlayerBankrupty() : void
    }

    class PlayerData{
        + PlayerBalance : int
        + TotalAset : int
        + Turn : int
        + PlayerStatus : PlayerStatus
        + PlayerBuildings : List~BuildableBlock~ 
        + PlayerPosition : BaseBlock
        + PlayerPrisonCount : int
        + DeffenseCard : IDeffenseCard

        + PlayerData(int turn)
    }
}

namespace Enum {
class BlockColor{
        <<enum>>
        Green
        Blue
        Yellow
        Red
        None
    }

    class BlockType{
        <<enum>>
        Start
        City
        Tourism
        Chance
        Prison
        Festival
        Traveling
        Tax
    }

    class BlockLine{
        <<enum>>
        First
        Second
        Third
        Fourth
    }
    
    class BuildingEffect{
        <<enum>>
        Storm = 50
        Blackout = 0
        Festival = 200
    }

    class PropertyType{
        <<enum>>
        Land = 1
        Vila = 2
        Building = 3
        Hotel = 4
        Landmark = 5
    }

    class ChanceCardType{
        <<enum>>
        Attack
        Deffense
        Command
    }

    class PlayerStatus{
        <<enum>>
        Playing
        Winner
        Loser
        Bankrupt
    }

    class WinningCondition{
        <<enum>>
        ColorCompletion
        LineCompletion
        TourismCompletion
        Bankruptcy
    }
}

